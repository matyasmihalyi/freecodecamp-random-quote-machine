{"version":3,"sources":["Card.tsx","Circle.tsx","animationHook.tsx","App.tsx","quoteHook.tsx","reportWebVitals.ts","index.tsx"],"names":["Card","quote","quotes","randomizeQuote","spinIt","className","style","zIndex","id","author","onClick","rel","target","href","encodeURIComponent","Circle","positionTop","positionLeft","size","spin","unSpinIt","styleObj","top","left","height","width","onAnimationEnd","useAnimation","useState","setSpin","backgroundColor","setBackgroundColor","r","Math","floor","random","g","b","randomizeColor","App","setQuotes","setQuote","index","length","useEffect","fetch","then","res","json","data","catch","err","console","log","message","useFetchQuote","transition","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.219441ef.chunk.js","sourcesContent":["import {Iquote} from './quoteHook'\r\n\r\ninterface CardProps {\r\n  quote:Iquote\r\n  quotes:Iquote[]\r\n  randomizeQuote (quotes:Iquote[]):void\r\n  spinIt():void\r\n}\r\n\r\nexport const Card = ({quote, quotes, randomizeQuote, spinIt}:CardProps ) => {  \r\n\r\n  return (\r\n    <div className=\"col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5\" style={{zIndex: 5}}>\r\n      <div className=\"card py-4 px-5 shadow \" id=\"quote-box\">\r\n        <div className=\"card-body text-center\">\r\n          <p className=\"card-title lead\" id=\"text\">{'\"' + quote.quote + '\"'}</p>\r\n          <p className=\"text-end\" id=\"author\">{'- ' + quote.author}</p>\r\n          <button className=\"btn btn-outline-secondary btn-lg mx-1\" id=\"new-quote\" onClick={()=> {randomizeQuote(quotes); spinIt()}}>New Quote</button>\r\n          <a rel=\"noreferrer\" className=\"btn btn-secondary btn-lg mx-1\" target=\"_blank\" href={`https://twitter.com/intent/tweet?text=${encodeURIComponent('\"' + quote.quote + '\"\\n-' + quote.author)}`} id=\"tweet-quote\"><i className=\"ri-twitter-fill\"></i></a>\r\n          <a rel=\"noreferrer\" className=\"btn btn-secondary btn-lg mx-1\" target=\"_blank\" href={`https://wa.me/?text=${encodeURIComponent('\"' + quote.quote + '\"\\n-' + quote.author)}`} id=\"tweet-code\"><i className=\"ri-whatsapp-fill\"></i></a>\r\n        </div>\r\n      </div>\r\n    </div>  \r\n  )\r\n}","import './Circle.css'\r\n\r\ninterface CircleProps {\r\n  positionTop:string\r\n  positionLeft:string\r\n  size:string\r\n  spin:number\r\n  unSpinIt:any\r\n}\r\n\r\n\r\nexport const Circle = ({positionTop, positionLeft, size, spin, unSpinIt}:CircleProps) => {\r\n\r\n  const styleObj = {\r\n    top: `${positionTop}`,\r\n    left: `${positionLeft}`,\r\n    height: `${size}`,\r\n    width: `${size}`,\r\n  }\r\n\r\n  return (\r\n\r\n    <span className=\"circle\" style={styleObj} \r\n      onAnimationEnd={() => unSpinIt()}\r\n      data-spin={spin}>\r\n    </span>\r\n  );\r\n}","import { useState } from \"react\";\r\n\r\nexport const useAnimation = () => {\r\n  const [spin, setSpin] = useState(0);\r\n\r\n  const [backgroundColor, setBackgroundColor] = useState('rgb(233, 123, 40)')\r\n\r\n  function randomizeColor ():void {\r\n    const r = Math.floor(Math.random() * (255 - 1));\r\n    const g = Math.floor(Math.random() * (255 - 1));\r\n    const b = Math.floor(Math.random() * (255 - 1));\r\n    setBackgroundColor(`rgba(${r + ',' + g + ',' + b})`);\r\n  }\r\n\r\n  function spinIt () {\r\n    setSpin(1);\r\n    randomizeColor();\r\n  };\r\n  \r\n  function unSpinIt () {\r\n    setSpin(0);\r\n  }\r\n\r\n  return {spin, spinIt, unSpinIt, backgroundColor}\r\n}","import React from 'react';\nimport { Card } from './Card';\nimport { Circle } from './Circle';\nimport { useFetchQuote } from './quoteHook';\nimport { useAnimation } from './animationHook';\n\n\nfunction App() {\n\n  const {spin, spinIt, unSpinIt, backgroundColor} = useAnimation();\n  \n  const {quote, quotes, randomizeQuote} = useFetchQuote();\n\n  const styleObj = {backgroundColor: backgroundColor, transition: \"backGround 3s ease-out\", zIndex: 1}\n  \n  return (\n    <div className=\"container-fluid position-relative overflow-hidden\" style={styleObj}>\n      <div className=\"min-vh-100 d-flex align-items-center justify-content-center bg-grey100\">\n       {quote && <Card quote={quote} quotes={quotes} randomizeQuote={randomizeQuote} spinIt={spinIt}/>}\n      </div>\n      {quote && <Circle positionTop=\"30%\" positionLeft=\"37%\" size=\"20vh\" spin={spin} unSpinIt={unSpinIt}/>}\n      {quote && <Circle positionTop=\"40%\" positionLeft=\"23%\" size=\"27vh\" spin={spin} unSpinIt={unSpinIt}/>}\n      {quote && <Circle positionTop=\"50%\" positionLeft=\"74%\" size=\"35vh\" spin={spin} unSpinIt={unSpinIt}/>}\n      {quote && <Circle positionTop=\"26%\" positionLeft=\"54%\" size=\"12vh\" spin={spin} unSpinIt={unSpinIt}/>}\n      {quote && <Circle positionTop=\"60%\" positionLeft=\"44%\" size=\"19vh\" spin={spin} unSpinIt={unSpinIt}/>}\n    </div>\n  );\n}\n\nexport default App;\n","import { useEffect, useState } from \"react\";\r\n\r\nexport interface Iquote {\r\n  quote: string, \r\n  author: string\r\n} \r\n\r\nexport const useFetchQuote = () => {\r\n\r\n  const [quotes, setQuotes] = useState<Iquote[]>([]);\r\n  const [quote, setQuote] = useState<Iquote>();\r\n\r\n  const randomizeQuote = (quotes:Iquote[]) => {\r\n    let index = Math.floor(Math.random() * (quotes.length + 1));\r\n    setQuote(quotes[index]);\r\n  }\r\n  \r\n  useEffect(()=>{\r\n    fetch(\"https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json\")\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      setQuotes(data.quotes);\r\n      randomizeQuote(data.quotes);\r\n    })\r\n    .catch(err => {\r\n      console.log(err.message);\r\n    })\r\n  }, []);\r\n\r\n  return {quotes, quote, randomizeQuote}\r\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'remixicon/fonts/remixicon.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}